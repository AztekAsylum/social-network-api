{"_type":"export","__export_format":4,"__export_date":"2023-10-19T03:31:37.132Z","__export_source":"insomnia.desktop.app:v2023.5.8","resources":[{"_id":"req_a4196b6004d1459bb8f9909700f27f64","parentId":"fld_529fd8d8527643b7b5c728ce5258d2f5","modified":1697684989905,"created":1697583938129,"url":"http://localhost:3001/api/thoughts","name":"Create Thought","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"username\": \"Freddy\",\n\t\"thoughtText\": \"Now I'm playing with power!\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583957023,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_529fd8d8527643b7b5c728ce5258d2f5","parentId":"wrk_8b7b9e4ada0a4bbcb6fd6a454f82e413","modified":1697583920507,"created":1697583920507,"name":"Thought Routes","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1697583920507,"_type":"request_group"},{"_id":"wrk_8b7b9e4ada0a4bbcb6fd6a454f82e413","parentId":null,"modified":1695313484362,"created":1695313484362,"name":"test","description":"","scope":"design","_type":"workspace"},{"_id":"req_fc7e4c308a2e49ec9364e830b2f8576d","parentId":"fld_529fd8d8527643b7b5c728ce5258d2f5","modified":1697684264373,"created":1697669332392,"url":"http://localhost:3001/api/thoughts/653097d561616f63c7e392f3/reactions","name":"Create Reaction","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"reactionBody\": \"You just can't keep a good guy down\",\n\t\"username\": \"Chucky\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583766235.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_bb61c3eb3c274f36b61c506ce4393fda","parentId":"fld_529fd8d8527643b7b5c728ce5258d2f5","modified":1697684561953,"created":1697671168730,"url":"http://localhost:3001/api/thoughts/653097d561616f63c7e392f3/reactions/65309a6861616f63c7e39304","name":"Delete Reaction","description":"","method":"DELETE","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583670841.375,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c34c4fa451d54b5ebdd1254ee55f5210","parentId":"fld_529fd8d8527643b7b5c728ce5258d2f5","modified":1697667202520,"created":1697584762789,"url":"http://localhost:3001/api/thoughts","name":"Get All Thoughts","description":"","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583575447.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_88f7d1581bd64d09802784186d182dd5","parentId":"fld_529fd8d8527643b7b5c728ce5258d2f5","modified":1697684781117,"created":1697680155001,"url":"http://localhost:3001/api/thoughts/65309d0961616f63c7e3930d","name":"Get One Thought","description":"","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583480053.625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_2bc6662f7fff45878cf1256a277b0dc4","parentId":"fld_529fd8d8527643b7b5c728ce5258d2f5","modified":1697685636809,"created":1697667244653,"url":"http://localhost:3001/api/thoughts/65309d0961616f63c7e3930d","name":"Update One Thought","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"thoughtText\": \"Hey, I beat my high score!\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583384659.75,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_973f1180522440b7981db4219b1972ab","parentId":"fld_529fd8d8527643b7b5c728ce5258d2f5","modified":1697684887037,"created":1697668023662,"url":"http://localhost:3001/api/thoughts/65309d0961616f63c7e3930d","name":"Delete One Thought","description":"","method":"DELETE","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583289265.875,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_0178618bbf974c42bb579ded5beb68c4","parentId":"fld_e236237897e44682994175072e8f3b16","modified":1697683139853,"created":1697228094026,"url":"http://localhost:3001/api/users","name":"Create User","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"username\": \"Scream\",\n\t\"email\": \"scream2@gmail.com\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583193872,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_e236237897e44682994175072e8f3b16","parentId":"wrk_8b7b9e4ada0a4bbcb6fd6a454f82e413","modified":1697583184036,"created":1697583184036,"name":"User Routes","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1697583184036,"_type":"request_group"},{"_id":"req_bec2b3ed61b14e2fb05ece94b9d10c63","parentId":"fld_e236237897e44682994175072e8f3b16","modified":1697680656708,"created":1697225423398,"url":"http://localhost:3001/api/users","name":"Get All Users","description":"","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583193772,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_03ee5ad857da4a8eb28bea57c1476ade","parentId":"fld_e236237897e44682994175072e8f3b16","modified":1697680667630,"created":1697680604871,"url":"http://localhost:3001/api/users/6530665a35b9aec43fc66170","name":"Get One User","description":"","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583193747,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_8abe32bad44645f59ee9d6a764f74799","parentId":"fld_e236237897e44682994175072e8f3b16","modified":1697682966003,"created":1697664039151,"url":"http://localhost:3001/api/users/653093c361616f63c7e392e4","name":"Update User","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"email\": \"brideofchucky@gmail.com\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583193722,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_74678b1908684b51b3059d6461ac5249","parentId":"fld_e236237897e44682994175072e8f3b16","modified":1697683301419,"created":1697664278532,"url":"http://localhost:3001/api/users/653095a361616f63c7e392ed","name":"Delete User","description":"","method":"DELETE","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583193672,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_4454bf0d6491407a8254a23267119ca9","parentId":"fld_e236237897e44682994175072e8f3b16","modified":1697683202103,"created":1697664390837,"url":"http://localhost:3001/api/users/653093c361616f63c7e392e4/friends/653096b061616f63c7e392f0","name":"Add Friend","description":"","method":"POST","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583193622,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ce3fb0b1b6a045e28f3bab6b1b4f0889","parentId":"fld_e236237897e44682994175072e8f3b16","modified":1697683351571,"created":1697666284837,"url":"http://localhost:3001/api/users/653093c361616f63c7e392e4/friends/653096b061616f63c7e392f0","name":"Delete Friend","description":"","method":"DELETE","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1697583193572,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_410e9fa61b5b2c3da1c7b41c102b7dcb3ace9850","parentId":"wrk_8b7b9e4ada0a4bbcb6fd6a454f82e413","modified":1695313484375,"created":1695313484375,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1695313484375,"_type":"environment"},{"_id":"jar_410e9fa61b5b2c3da1c7b41c102b7dcb3ace9850","parentId":"wrk_8b7b9e4ada0a4bbcb6fd6a454f82e413","modified":1696451892264,"created":1695313484375,"name":"Default Jar","cookies":[{"key":"connect.sid","value":"s%3Ax9OBLfgxyISSyCwiTAoZyttSqUUkwiLO.MrZRAtThjfQftVlUotXNnGajfRbOBGU0FDk5euuMs18","domain":"127.0.0.1","path":"/","httpOnly":true,"hostOnly":true,"creation":"2023-10-04T20:38:12.259Z","lastAccessed":"2023-10-04T20:38:12.259Z","id":"34753244841534014"}],"_type":"cookie_jar"},{"_id":"spc_e1eb75e3dea648138ecbd1df946dbb23","parentId":"wrk_8b7b9e4ada0a4bbcb6fd6a454f82e413","modified":1695313513592,"created":1695313513592,"fileName":"New Document","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"}]}